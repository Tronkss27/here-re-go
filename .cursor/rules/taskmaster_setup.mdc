---
description:
globs:
alwaysApply: false
---
# Task Master Setup & Troubleshooting Guide

## Required Directory Structure

After `task-master init`, your project should have:

```
your-repo/
├─ .cursor/
│   ├─ mcp.json
│   └─ rules/
│       ├─ dev_workflow.mdc
│       ├─ taskmaster.mdc
│       └─ taskmaster_setup.mdc
├─ scripts/
│   └─ prd.txt             ← your PRD document
├─ tasks/                  ← (generated by Task Master)
└─ tasks.json              ← (Task Master's central file)
```

## MCP Configuration Requirements

Your `.cursor/mcp.json` must include:

```json
{
  "mcpServers": {
    "taskmaster-ai": {
      "command": "npx",
      "args": ["-y", "--package=task-master-ai", "task-master-ai"],
      "env": {
        "ANTHROPIC_API_KEY": "YOUR_ANTHROPIC_API_KEY_HERE",
        "PERPLEXITY_API_KEY": "YOUR_PERPLEXITY_API_KEY_HERE",
        "OPENAI_API_KEY": "YOUR_OPENAI_KEY_HERE",
        "GOOGLE_API_KEY": "YOUR_GOOGLE_KEY_HERE",
        "MISTRAL_API_KEY": "YOUR_MISTRAL_KEY_HERE"
      }
    }
  }
}
```

## Verification Checklist

- [ ] Task Master installed (`npm install -g task-master-ai` OR `npm install task-master-ai`)
- [ ] `task-master init` completed without errors  
- [ ] `.cursor/mcp.json` exists with correct mcpServers configuration
- [ ] `.cursor/rules/dev_workflow.mdc` exists with `alwaysApply: true`
- [ ] `.cursor/rules/taskmaster.mdc` exists with command reference
- [ ] All rule files committed to version control
- [ ] Cursor is in Agent mode (MCP active)
- [ ] Test command works: "task-master list" returns table (possibly empty)
- [ ] PRD parsing works: "task-master parse-prd scripts/prd.txt" generates tasks

## Common Issues & Solutions

### Rule files not being picked up?
- Ensure files are named `*.mdc` (not `.md` or `.txt`)
- Files must reside in `./.cursor/rules/` directory  
- Check `alwaysApply: true` is correctly indented in YAML front matter
- **Close and reopen Cursor** to reload rule files (known bug)
- If legacy `.cursorrules` exists at root, migrate content to `.cursor/rules/*.mdc`

### MCP server not reachable?
- Verify `.cursor/mcp.json` has correct `"command": "npx"` and args
- Ensure all required environment variables (API keys) are set
- Test outside Cursor: run `npx task-master list` from project folder
- If CLI fails, MCP server won't work either

### Task Master commands returning errors?
- Check `tasks.json` for valid JSON (no trailing commas)
- Run `task-master validate-dependencies` to check for circular deps
- Use `task-master fix-dependencies` to auto-resolve dependency issues
- Ensure all task IDs referenced in dependencies actually exist

### AI calls timing out or failing?
- Verify API keys are correctly set in `.cursor/mcp.json` env section
- Check model configuration with `task-master models`
- Use `task-master models --setup` for interactive model configuration
- Some operations (parse-prd, expand, analyze-complexity) can take 1+ minutes

## Best Practices

### PRD Management
- Keep your PRD in `scripts/prd.txt` for consistency
- Update PRD when requirements change, then re-parse
- Use descriptive sections: Features, Technical Requirements, Constraints

### Task Workflow
1. **Always start with**: `task-master list` to see current state
2. **Next task selection**: Use `task-master next` for dependency-aware recommendations  
3. **Before implementation**: Use `task-master show <id>` for detailed requirements
4. **During implementation**: Use `task-master update-subtask` to log progress
5. **After completion**: Use `task-master set-status --id=<id> --status=done`

### Dependency Management
- Add dependencies when creating tasks: `--dependencies=<ids>`
- Validate regularly: `task-master validate-dependencies`
- Fix issues automatically: `task-master fix-dependencies`
- Use task hierarchy (subtasks) for related work

### Large Task Breakdown
- Use complexity analysis: `task-master analyze-complexity --research`
- Break down complex tasks: `task-master expand --id=<id> --research`
- Clear and regenerate subtasks if needed: `task-master clear-subtasks --id=<id>`
- Prefer subtasks over separate tasks for cohesive features

### Research Integration
- Use `--research` flag for AI-powered insights
- Requires Perplexity API key in environment
- Most useful for: parse-prd, expand, analyze-complexity, add-task

## File Maintenance

### Regular Tasks
- Commit all `.cursor/rules/*.mdc` files to version control
- Backup `tasks.json` before major restructuring
- Generate fresh task files after updates: `task-master generate`

### Team Collaboration
- Share `.cursor/mcp.json` structure (without API keys)
- Ensure all team members have same rule files
- Use Task Master for consistent project organization
- Resolve merge conflicts in `tasks.json` using `task-master move` commands

### Performance Tips
- Use task filtering: `task-master list --status=pending`
- Batch operations when possible
- Clear unused subtasks to keep tasks.json clean
- Regular dependency validation prevents issues

## Environment Variables Reference

Required for specific providers:
- `ANTHROPIC_API_KEY`: For Claude models
- `PERPLEXITY_API_KEY`: For research operations  
- `OPENAI_API_KEY`: For GPT models
- `GOOGLE_API_KEY`: For Gemini models
- `MISTRAL_API_KEY`: For Mistral models
- `AZURE_OPENAI_API_KEY` + `AZURE_OPENAI_ENDPOINT`: For Azure OpenAI
- `OPENROUTER_API_KEY`: For OpenRouter models
- `XAI_API_KEY`: For xAI models
- `OLLAMA_API_KEY` + `OLLAMA_BASE_URL`: For local Ollama

## Integration with Cursor

Thanks to the rule files:
- `dev_workflow.mdc` (always applied): Core workflow knowledge
- `taskmaster.mdc` (agent requested): Command reference

Cursor's AI agent automatically knows:
- All Task Master CLI commands and syntax
- Natural language to command mapping
- Expected outcomes and usage patterns
- Error handling and troubleshooting steps

You can interact entirely through chat:
- "Let's implement task 2. What does it involve?" → runs `task-master show 2`
- "Mark task 2 as done." → runs `task-master set-status --id=2 --status=done`  
- "Break task 4 into subtasks focused on security." → runs `task-master expand --id=4 --research --prompt="security"`

**Never manually type `task-master` commands in terminal when using Cursor Agent mode!**
